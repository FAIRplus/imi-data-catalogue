logging:
  version: 1
  disable_existing_loggers: False
  root:
    handlers:
      - console
      - file
    level: DEBUG
  loggers:
    idp:
      level: DEBUG
  handlers:
    console:
      class: logging.StreamHandler
      stream: 'ext://sys.stdout'
      formatter: default
    file:
      class: logging.FileHandler
      filename: 'debug.log'
      formatter: default
  formatters:
    default:
      format: '%(asctime)s %(name)s %(levelname)s %(message)s'

port: &port 5000
domain: &domain localhost
base_url: "http://{domain}:{port}"

httpc_params:
  # This is just for testing an local usage. In all other cases it MUST be True
  verify: true
  # Client side
  #  client_cert: "certs/client.crt"
  #  client_key: "certs/client.key"

keydefs: &keydef
  - "type": "RSA"
    "key": ''
    "use": [ "sig" ]
  - "type": "EC"
    "crv": "P-256"
    "use": [ "sig" ]

rp_keys:
  'private_path': 'datacatalog/private/jwks.json'
  'key_defs': *keydef
  'public_path': 'datacatalog/static/public/jwks.json'
  # this will create the jwks files if they are absent
  'read_only': False

client_preferences: &id001
  application_name: rphandler
  application_type: web
  contacts:
    - ops@example.com
  response_types:
    - code
  scope:
    - openid
    - profile
    - email
    - address
    - phone
  token_endpoint_auth_method:
    - client_secret_basic
    - client_secret_post

services: &id002
  discovery: &disc
    class: oidcservice.oidc.provider_info_discovery.ProviderInfoDiscovery
    kwargs: { }
  registration: &regist
    class: oidcservice.oidc.registration.Registration
    kwargs: { }
  authorization: &authz
    class: oidcservice.oidc.authorization.Authorization
    kwargs: { }
  accesstoken: &acctok
    class: oidcservice.oidc.access_token.AccessToken
    kwargs: { }
  userinfo: &userinfo
    class: oidcservice.oidc.userinfo.UserInfo
    kwargs: { }
  end_session: &sess
    class: oidcservice.oidc.end_session.EndSession
    kwargs: { }

clients:
  "":
    client_preferences: *id001
    redirect_uris: None
    services: *id002
  keycloak:
    client_preferences: *id001
    issuer: https://keycloak.lcsb.uni.lu/auth/realms/master
    redirect_uris:
      - 'http://{domain}:{port}/authz_cb/keycloak'
    post_logout_redirect_uris:
      #      - "http://{domain}:{port}/session_logout/keycloak"
      - "http://{domain}:{port}/oidc/logged_out"
    #    frontchannel_logout_uri: "https://{domain}:{port}/fc_logout/keycloak"
    #    frontchannel_logout_session_required: False
    #    backchannel_logout_uri: "https://{domain}:{port}/bc_logout/keycloak"
    #    backchannel_logout_session_required: True
    services:
      discovery: *disc
      #      registration: *regist
      authorization: *authz
      accesstoken: *acctok
      userinfo: *userinfo
      end_session: *sess
    client_id: 'data-catalogue-test'
    client_secret: '8b3863c1-2412-45da-8d23-44e5abed1dca'
    add_ons:
      pkce:
        function: oidcservice.oidc.add_on.pkce.add_pkce_support
        kwargs:
          code_challenge_length: 64
          code_challenge_method: S256
  #      status_check:
  #        function: oidcservice.oidc.add_on.status_check.add_status_check_support
  #        kwargs:
  #          rp_iframe_path: "templates/rp_iframe.html"


webserver:
  port: *port
  domain: *domain
  # If BASE is https these has to be specified
  server_cert: "certs/cert.pem"
  server_key: "certs/key.pem"
  # If you want the clients cert to be verified
  # verify_user: optional
  # The you also need
  # ca_bundle: ''
  debug: true
